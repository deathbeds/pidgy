[no-indent]
description = "A Markdown paragraph is a block string."
in = "This is a Markdown paragraph"
out = "'''This is a Markdown paragraph''';"

[yes-indent]
description = "Indented Markdown block code is Python."
in = "    print('this is code')"
out = "print('this is code')"

[code-fence-is-block-string]
in = """```{code} fence
code shenanigans
```
"""
out = """'''```{code} fence
code shenanigans
```''';
"""

[continued-markdown-statement]
description = "Markdown blocks care defined as variables using line continuations"
in = """     foo = \\
This is a Markdown paragraph.
"""
out = """
foo = \\
'''This is a Markdown paragraph.''';
"""

[paren-markdown-statement]
description = "Parenthesis can group markdown blocks"
in = """    foo = (
This is a Markdown paragraph.

    )
"""
out = """
foo = (
'''This is a Markdown paragraph.'''

)
"""

[explict-single-quotes]
in = """    foo = '''
This is a Markdown paragraph.

    '''.lower()
"""
out = """foo = '''
This is a Markdown paragraph.

'''.lower()
"""

[explict-double-quotes]
in = '''    foo = """
This is a Markdown paragraph.

    """.lower()
'''
out = '''foo = """
This is a Markdown paragraph.

""".lower()
'''

[function-docstring]
in = '''    def func(x: object) -> None:
A Markdown paragraph as a docstring
'''
out = """def func(x: object) -> None:
    '''A Markdown paragraph as a docstring''';
"""

[function-docstring-extra-trailing-indent]
in = '''    def func(x: object) -> None:
A Markdown paragraph as a docstring
             
                ...
'''
out = """def func(x: object) -> None:
            '''A Markdown paragraph as a docstring'''

            ...
"""

[class-docstring]
in = '''    class Class(Object):
A Markdown paragraph as a docstring
'''
out = """class Class(Object):
    '''A Markdown paragraph as a docstring''';
"""

[class-docstring-extra-indent]
in = '''        class Class(Object):
A Markdown paragraph as a docstring

                            def prop(self):
                                pass
'''
out = """class Class(Object):
                    '''A Markdown paragraph as a docstring'''

                    def prop(self):
                        pass
"""

[class-method-docstring]
in = '''        class Class(Object):
A Markdown paragraph as a docstring

                            def prop(self):
  A Markdown paragraph as a method docstring

                                        pass
'''
out = """class Class(Object):
                    '''A Markdown paragraph as a docstring'''

                    def prop(self):
                                '''A Markdown paragraph as a method docstring'''

                                pass
"""

[single-indent-is-paragraph-in-a-markdown-list]
in = """*  A Markdown List

    This line is not code

* Another item in the list

        # This line IS code
"""
out = """'''*  A Markdown List

    This line is not code

* Another item in the list'''

# This line IS code
"""