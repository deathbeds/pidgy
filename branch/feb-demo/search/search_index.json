{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pidgy</code> literate computing interface","text":"<p><code>pidgy</code> is a fun, literate and interactive style of programming in markdown &amp; python. together, these languages offer an exciting new experience to rapidly co-develop of code and narrative in Jupyter computational notebooks.</p>"},{"location":"#writing-with-pidgy","title":"writing with <code>pidgy</code>","text":"<pre><code>pip install pidgy\n</code></pre> install <code>pidgy</code> with `pip` <pre><code>%reload_ext pidgy\n</code></pre> <ol> <li>\ud83e\ude90 open a jupyter notebook</li> <li>\ud83d\udd0c activate the <code>pidgy</code> extension</li> <li>\u270f\ufe0f program in markdown</li> </ol> <p>\ud83d\udca1 try <code>pidgy</code> in jupyterlite without any installation3 </p>"},{"location":"#programming-in-markdown","title":"programming in markdown","text":"<p>markdown is inclusive AF!1 it is a plain-text format that never fails 2. further markdown can include any programming language within its contents. effectively, markdown files are literate programs that really on code and narrative to cooperate. markdown is a global minimum for teams of people with different language literacies.</p> <p>a Tab separates markdown code and narrative, <code>pidgy</code> uses this nearness to create python representations of the markdown. with code and narrative so close, an author can fluidly switch between the writing modes capturing more of their process.</p>"},{"location":"#learn-more","title":"learn more","text":"<ul> <li>try <code>pidgy</code>, without installing it, in <code>jupyterlite</code>.</li> <li>learn more from the <code>pidgy</code> documentation.</li> <li>learn how CommonMark markdown converts to python</li> <li>contributing and development</li> </ul>"},{"location":"#development","title":"development","text":"<ol> <li> <p>there are techniques for improving accessibility of markdown and abiding best practices.\u00a0\u21a9</p> </li> <li> <p>markdown WILL violate expectation through implementation inconsistencies. over time we learn to navigate the nuances across products.\u00a0\u21a9</p> </li> <li> <p>jupyterlite is a new in-the-browser jupyter experience that requires zero installation.\u00a0\u21a9</p> </li> </ol>"},{"location":"basics/","title":"<code>pidgy</code> basics","text":"<p><code>pidgy</code> uses markdown as programming and document language. it is designed for writing intermingling narrative and code. be experimental. have fun.</p> <pre><code>    # pidgy suppresses output when beginning with a blank line.\n    %reload_ext pidgy\n    shell.weave.reactive = False\n    shell.tangle.include_code_fences = ()\n</code></pre>        # pidgy suppresses output when beginning with a blank line.     %reload_ext pidgy     shell.weave.reactive = False     shell.tangle.include_code_fences = ()"},{"location":"basics/#tangle-markdown-to-python","title":"tangle markdown to python","text":"<p>a single Tab separates code and non-code in markdown.</p> <p>a block of markdown illustrating the subtle difference between code blocks and non-code blocks.</p> <pre><code>    # indented code block\n# markdown heading\n</code></pre> <p>python and markdown have constrasting views of the <code>#</code>. in python, lines beginning with <code>#</code> are comments that are ignored. while in markdown, the <code>#</code> represent an <code>&lt;h1&gt;</code> which is a very meaningful element.1</p> <p>the nearness between narrative and code allows for fluid transitions between  literary and computational thinking. typically, in notebooks, narrative and code are separated by distinct cell boundaries.</p> <pre><code>#### setting markdown to variables\n\nan early &lt;abbr title=\"markdown and python pidgin syntax\"&gt;markdonic hybird syntax you may use is sets markdown blocks as strings. everything in between code blocks is a big old block string.\n\n&lt;figure markdown&gt;\n&lt;figcaption markdown&gt;\na practical case  for settings markdown to variables is very useful for collecting variables or lists of variables.\nthe outcome is demonstrated by `pidgy_links` below\n&lt;/figcaption&gt;\n\n    pidgy_links=\\\n* https://deathbeds.github.io/pidgy/\n* https://github.com/pidgy/\n&lt;/figure&gt;\n\n{% set block %}\n    my_variable_name = \\\n\na markdown paragraph\n{% endset %}\n\n&lt;figure markdown&gt;\n&lt;figcaption markdown&gt;\nmarkdown input defined &lt;code&gt;my_variable_name&lt;/code&gt; to a markdown paragraph.\nduring translation, line continuations are included to connect code blocks to markdown blocks.\n&lt;/figcaption&gt;\n\n```markdown\n{{block}}\n```\n&lt;/figure&gt;\n\n&lt;figure&gt;\n&lt;figcaption&gt;the python translation of the markdown&lt;/figcaption&gt;\n\n```python\n{{shell.tangle.render(block)}}\n```\n&lt;/figure&gt;\n</code></pre>"},{"location":"basics/#setting-markdown-to-variables","title":"setting markdown to variables","text":"<p>an early markdonic hybird syntax you may use is sets markdown blocks as strings. everything in between code blocks is a big old block string. <p>a practical case  for settings markdown to variables is very useful for collecting variables or lists of variables. the outcome is demonstrated by <code>pidgy_links</code> below</p> <pre><code>pidgy_links=\\\n</code></pre> <ul> <li>https://deathbeds.github.io/pidgy/</li> <li>https://github.com/pidgy/</li> </ul> <p>markdown input defined <code>my_variable_name</code> to a markdown paragraph. during translation, line continuations are included to connect code blocks to markdown blocks.</p> <pre><code>    my_variable_name = \\\n\na markdown paragraph\n</code></pre> the python translation of the markdown <pre><code>my_variable_name = \\\n    \\\n\"\"\"a markdown paragraph\"\"\";\n</code></pre> <pre><code>#### writing markdown docstrings\n\npidgy has heuristics for dealing nested blocks in python make it easy to write docstrings in markdown.\n\n{% set block %}\n    my_variable_name = \\\n\na markdown paragraph\n\n    class MyClass:\nyou bet this with classes.\n\n        def sub_function(self):\neven inside of class methods!\n\n            return \"\ud83d\udd25\"\n{% endset %}\n\n##### docstrings in markdown\n\n&lt;figure&gt;\n&lt;figcaption&gt;\nmarkdown input defined &lt;code&gt;my_variable_name&lt;/code&gt; to a markdown paragraph.\nduring translation, line continuations are included to connect code blocks to markdown blocks.\n&lt;/figcaption&gt;\n\n```markdown\n{{block}}\n```\n&lt;/figure&gt;\n\n##### docstrings in python\n\n&lt;figure&gt;\n&lt;figcaption&gt;the python translation of the markdown&lt;/figcaption&gt;\n\n```python\n{{shell.tangle.render(block)}}\n```\n&lt;/figure&gt;\n</code></pre>"},{"location":"basics/#writing-markdown-docstrings","title":"writing markdown docstrings","text":"<p>pidgy has heuristics for dealing nested blocks in python make it easy to write docstrings in markdown.</p>"},{"location":"basics/#docstrings-in-markdown","title":"docstrings in markdown","text":"markdown input defined <code>my_variable_name</code> to a markdown paragraph. during translation, line continuations are included to connect code blocks to markdown blocks.  <pre><code>    my_variable_name = \\\n\na markdown paragraph\n\n    class MyClass:\nyou bet this with classes.\n\n        def sub_function(self):\neven inside of class methods!\n\n            return \"\ud83d\udd25\"\n</code></pre>"},{"location":"basics/#docstrings-in-python","title":"docstrings in python","text":"the python translation of the markdown <pre><code>my_variable_name = \\\n    \\\n\"\"\"a markdown paragraph\"\"\"\n\nclass MyClass:\n\"\"\"you bet this with classes.\"\"\"\n\n    def sub_function(self):\n\"\"\"even inside of class methods!\"\"\"\n\n        return \"\ud83d\udd25\"\n</code></pre>"},{"location":"basics/#weave-markdown-to-a-display","title":"weave markdown to a display","text":"<p><code>jinja2</code> is a powerful templating engine in between markdown and python. it lets authors include variables from their current namespace directly into a rich display; <code>pidgy</code> also reacts to changes and updates the display.</p> <pre><code>#### suppressing the display\n\nstart the cell with a blank line to suppress the woven display.\nthis is a quick way to suppress supporting code or `import`s that don't add directly to the narrative.\n</code></pre>"},{"location":"basics/#suppressing-the-display","title":"suppressing the display","text":"<p>start the cell with a blank line to suppress the woven display. this is a quick way to suppress supporting code or <code>import</code>s that don't add directly to the narrative.</p> <pre><code>#### reactivity\n\n`pidgy` is reactive out of the box; any [variables included in the display](#including-variables-in-the-display) are updated when values change during cell execution.\n\n[learn more about reactivity and working with widgets](reactivity.ipynb)\n</code></pre>"},{"location":"basics/#reactivity","title":"reactivity","text":"<p><code>pidgy</code> is reactive out of the box; any variables included in the display are updated when values change during cell execution.</p> <p>learn more about reactivity and working with widgets</p> <pre><code>## learn more\n</code></pre>"},{"location":"basics/#learn-more","title":"learn more","text":"<ol> <li> <p>web content accessibility guidelines recommend one and only one <code>&lt;h1&gt;</code> on your page, the same should go for your markdown\u00a0\u21a9</p> </li> </ol>"},{"location":"magics/","title":"<code>pidgy</code> magics","text":"<p><code>pidgy</code> provides magics to introspect parts of the literate computing process.</p> <ol> <li> <code>%%parse</code> parse markdown in <code>markdown-it-py</code> tokens </li> <li> <code>%%tangle</code> parse then translate markdown to python </li> <li> <code>%%weave</code> display the markdown as an interactive, templating display </li> <li> <code>%%pidgy</code> executed the <code>%%tangle</code> python code and display the <code>%%weave</code> of the markdown  </li> </ol>"},{"location":"magics/#activate-the-magic-extension","title":"activate the magic extension","text":"<p>the magics are automatically activated in <code>pidgy</code> mode. the <code>pidgy.magics</code> extension can be used to partially opt-in to <code>pidgy</code>.</p> <pre><code>    %reload_ext pidgy.magics\n</code></pre> <p>cell magics are an <code>IPython</code> convention not generally available in python that help with interactive computing.</p> <pre><code>%%parse\n`%%parse` helps to peek at the tokens that make up the markdown. \n</code></pre> <pre>[Token(type='paragraph_open', tag='p', nesting=1, attrs={}, map=[0, 1], level=0, children=None, content='', markup='', info='', meta={}, block=True, hidden=False),\n Token(type='inline', tag='', nesting=0, attrs={}, map=[0, 1], level=1, children=[Token(type='code_inline', tag='code', nesting=0, attrs={}, map=None, level=0, children=None, content='%%parse', markup='`', info='', meta={}, block=False, hidden=False), Token(type='text', tag='', nesting=0, attrs={}, map=None, level=0, children=None, content=' helps to peek at the tokens that make up the markdown.', markup='', info='', meta={}, block=False, hidden=False)], content='`%%parse` helps to peek at the tokens that make up the markdown.', markup='', info='', meta={}, block=True, hidden=False),\n Token(type='paragraph_close', tag='p', nesting=-1, attrs={}, map=None, level=0, children=None, content='', markup='', info='', meta={}, block=True, hidden=False)]</pre>"},{"location":"magics/#markdown-as-python","title":"markdown as python","text":"<pre><code>%%tangle\n    class tangle:\nthe `%%tangle` magic exists to interrogate how markdown transforms to python using `pidgy`s heuristics.\n\nwhen this magic is used, none of the code is executed.\n</code></pre> <pre>class tangle:\n\"\"\"the `%%tangle` magic exists to interrogate how markdown transforms to python using `pidgy`s heuristics.\n\nwhen this magic is used, none of the code is executed.\"\"\";\n</pre> <pre><code>    assert \"tangle\" not in locals(), F\"{tangle} is registered\"\n</code></pre>"},{"location":"magics/#weave-magics","title":"<code>weave</code> magics","text":"<p>it is possible to use <code>pidgy</code>s interactive display features without going full on.</p> <p>displays in <code>weave</code> are interactive <code>jinja2</code> templates.</p>"},{"location":"magics/#interactively-displaying-the-markdown","title":"interactively displaying the markdown","text":"<pre><code>%%weave\n    def pidgy():\n`%%pidgy` is parts of `%%tangle` and `%%weave`.\n</code></pre> <pre><code>def pidgy():\n</code></pre> <p><code>%%pidgy</code> is parts of <code>%%tangle</code> and <code>%%weave</code>.</p>"},{"location":"magics/#pidgy-without-the-extension","title":"<code>pidgy</code> without the extension","text":"<pre><code>%%pidgy\n    def pidgy():\n`%%pidgy` is parts of `%%tangle` and `%%weave`.\n</code></pre> <pre><code>def pidgy():\n</code></pre> <p><code>%%pidgy</code> is parts of <code>%%tangle</code> and <code>%%weave</code>.</p> <pre><code>\n</code></pre>"},{"location":"mkdocs/","title":"<code>pidgy</code> mkdocs extension","text":"<p><code>pidgy</code> ships an extension for publishing notebooks with all <code>mkdocs</code> rich document features.1</p> <pre><code>    %reload_ext pidgy\n</code></pre>        %reload_ext pidgy   <p>the extension exists to get the best out of notebooks and <code>mkdocs</code>. it using standard <code>jupyter</code> machinery to converts to markdown documents that <code>mkdocs</code> can consume.</p>"},{"location":"mkdocs/#notebook-metadata","title":"notebook metadata","text":"<p>currently, we do nothing with notebook metadata, but ideas are welcome. one idea would be to run execute notebooks.</p> <pre><code>## jupyter displays\n\n`pidgy` wants you to have all the tools you need to write and build applications. when you the load the `pidgy` extension you have access to user interfaces in `IPython.display` and `ipywidgets` to get you started.\n</code></pre>"},{"location":"mkdocs/#jupyter-displays","title":"jupyter displays","text":"<p><code>pidgy</code> wants you to have all the tools you need to write and build applications. when you the load the <code>pidgy</code> extension you have access to user interfaces in <code>IPython.display</code> and <code>ipywidgets</code> to get you started.</p> <pre><code>### jupyter widgets\n\njupyter widgets are included in the display, but that are not interactive. they can be used interactively in jupyter lite.\n</code></pre>"},{"location":"mkdocs/#jupyter-widgets","title":"jupyter widgets","text":"<p>jupyter widgets are included in the display, but that are not interactive. they can be used interactively in jupyter lite.</p> <pre><code>    IntSlider(10, 0, 100, 1, description=\n\nan ipywidgets slider \n\n    )\n</code></pre> <pre>IntSlider(value=10, description='an ipywidgets slider')</pre> <pre><code>IntSlider(10, 0, 100, 1, description=\n</code></pre> <p>an ipywidgets slider </p> <pre><code>)\n</code></pre> <pre><code>## `pidgy` `mkdocs` mode\n\n\nwhen `%load_ext pidgy` or `%reload_ext pidgy` is found in a notebook cell, we render the documents in `pidgy` mode.\nthe inputs are hidden and all that is published are the outputs of the document.\n</code></pre>"},{"location":"mkdocs/#pidgy-mkdocs-mode","title":"<code>pidgy</code> <code>mkdocs</code> mode","text":"<p>when <code>%load_ext pidgy</code> or <code>%reload_ext pidgy</code> is found in a notebook cell, we render the documents in <code>pidgy</code> mode. the inputs are hidden and all that is published are the outputs of the document.</p> <ol> <li> <p>originally <code>pidgy</code> used the useful <code>mkdocs-jupyter</code> for rendering notebooks. this project inspired <code>pidgy</code>s extension which moves the <code>nbconvert</code> process earlier in the <code>mkdocs</code> event cycle; it drops a lot of the form that <code>mkdocs-jupyter</code>  maintains.s\u00a0\u21a9</p> </li> </ol>"},{"location":"pidgy_examples.md/","title":"<code>pidgy</code> examples","text":"<p>this notebook demonstrates pidgy syntax. we begin by initializing the <code>pidgy</code> extension.  it is possible to use a <code>pidgy</code> kernel instead of the extension, but for testing purposes we use the extension.</p> <pre><code>    %reload_ext pidgy\n</code></pre>         %reload_ext pidgy   <pre><code>&lt;details&gt;\n    &lt;summary&gt;hidden settings for testing this notebook&lt;/summary&gt;    \n\n&lt;p&gt;out of the box, `pidgy` is asynchrous and reactive, but to use this document for testing we have to constrain the execution to synchronous and blocking. &lt;/p&gt;\n\n\n    %matplotlib agg\n    shell.weave.reactive = False\n    from pidgy import get_ipython\n\n&lt;/details&gt;\n</code></pre> hidden settings for testing this notebook <p>out of the box, `pidgy` is asynchrous and reactive, but to use this document for testing we have to constrain the execution to synchronous and blocking. </p>       %matplotlib agg     shell.weave.reactive = False     from pidgy import get_ipython"},{"location":"pidgy_examples.md/#an-indent-can-make-a-big-different","title":"an indent can make a big different","text":"<p>under normal cirumstances, the following line of code is valid python, but in <code>pidgy</code> it is valid markdown and we observe this visually. </p> <pre><code>print(\"this is a markdown paragraph\")\n</code></pre> <p>print(\"this is a markdown paragraph\")</p> <p>compare the previous woven display with the following that indents the code. we notice the output in typeset as a monospace font rather than the prior rich typeface.</p> <pre><code>    print(\"this is an indented code block\")\n</code></pre> <pre>this is an indented code block\n</pre> <pre><code>print(\"this is an indented code block\")\n</code></pre> <p>that is really all there is to <code>pidgy</code>. we must indent the code, as follows, to make sure execution is engaged. indent your code, and tell good stories.</p> <p>indenting code in notebooks is a useful practice, unindented code rendered as markdown appears as rich text and is not canonical. </p>"},{"location":"pidgy_examples.md/#suppressing-the-woven-display","title":"suppressing the woven display","text":"<p>begin a cell with a single empty line to suppress a display. the following code is execute but</p> <pre><code>    print(\"the input source is not shown because the code block begins with a blank line\")\n</code></pre> <pre>the input source is not shown because the code block begins with a blank line\n</pre>        print(\"the input source is not shown because the code block begins with a blank line\")   <pre><code>## all markdown is a string\n\nin `pidgy`, markdown and python can cooperate.\nthe primary way this is acheived is by representing markdown blocks as block quotes rather than comments.\nas strings, markdown can join the party.\n\n\nwe start slow by defining a markdown paragraph to a variable name `paragraph`\n\n\n    paragraph =\\\nimagine you wrote a really cool paragraph.\nit has words, sentences, and drama.\nyou have a word limit and you need to count the words.\n\n\nwith `paragraph` saved as a variable it becomes easy to count our words.\n\n    Markdown(F\"the `paragraph` has {len(paragraph.split())} words\") # pidgy exposes IPython display in the primary namespace\n</code></pre> <p>the <code>paragraph</code> has 38 words</p>"},{"location":"pidgy_examples.md/#all-markdown-is-a-string","title":"all markdown is a string","text":"<p>in <code>pidgy</code>, markdown and python can cooperate. the primary way this is acheived is by representing markdown blocks as block quotes rather than comments. as strings, markdown can join the party.</p> <p>we start slow by defining a markdown paragraph to a variable name <code>paragraph</code></p> <pre><code>paragraph =\\\n</code></pre> <p>imagine you wrote a really cool paragraph. it has words, sentences, and drama. you have a word limit and you need to count the words.</p> <p>with <code>paragraph</code> saved as a variable it becomes easy to count our words.</p> <pre><code>Markdown(F\"the `paragraph` has {len(paragraph.split())} words\") # pidgy exposes IPython display in the primary namespace\n</code></pre>"},{"location":"pidgy_examples.md/#connecting-markdown-and-indented-python-code","title":"connecting markdown and indented python code","text":"<pre><code>### docstrings\n</code></pre>"},{"location":"pidgy_examples.md/#docstrings","title":"docstrings","text":""},{"location":"pidgy_examples.md/#line-continuations","title":"line continuations","text":""},{"location":"pidgy_examples.md/#parenthesis","title":"parenthesis","text":""},{"location":"pidgy_examples.md/#templating-markdown","title":"templating markdown","text":"<p>so far we have discussed two cooperative syntaxes: markdown and python.  the last major piece to <code>pidgy</code> are <code>jinja2</code> templates that allow python variables to be woven into rich, interactive displays.</p> <p><code>pidgy</code> extends markdown by being aware of <code>jinja2</code> templates that can include live data into woven displays</p> <pre><code>{{df.describe().T}}\n\n    import pandas\n\n    df = pandas.DataFrame([x, 0, 0 ] for x in range(10))\n</code></pre> count mean std min 25% 50% 75% max 0 10.0 4.5 3.02765 0.0 2.25 4.5 6.75 9.0 1 10.0 0.0 0.00000 0.0 0.00 0.0 0.00 0.0 2 10.0 0.0 0.00000 0.0 0.00 0.0 0.00 0.0 <pre><code>import pandas\n\ndf = pandas.DataFrame([x, 0, 0 ] for x in range(10))\n</code></pre>"},{"location":"pidgy_examples.md/#iframes-and-images","title":"iframes and images","text":"<p>https://nbviewer.org/github/deathbeds/pidgy/blob/master/docs/tangle_examples.ipynb</p>"},{"location":"reactivity/","title":"reactivity in pidgy","text":"<p><code>pidgy</code> allows authors to include python objects in their markdown using <code>jinja</code> templates.</p> <pre><code>    %reload_ext pidgy\n</code></pre>        %reload_ext pidgy   <pre><code>## reactive templates\n\n`jinja2` is `pidgy`s preferred template language that allows python objects to be displayed in markdown displays. when templates are used, `pidgy` watches for changes to template variables and will update displays when the values change.\n</code></pre>"},{"location":"reactivity/#reactive-templates","title":"reactive templates","text":"<p><code>jinja2</code> is <code>pidgy</code>s preferred template language that allows python objects to be displayed in markdown displays. when templates are used, <code>pidgy</code> watches for changes to template variables and will update displays when the values change.</p> <pre><code>### modified `IPython` templates\n\n`pidgy` features modified `jinja2` templates that can access all the variables in the interactive shell. templates are rendered by the `IPython` display system and converted to their web representation.\n</code></pre>"},{"location":"reactivity/#modified-ipython-templates","title":"modified <code>IPython</code> templates","text":"<p><code>pidgy</code> features modified <code>jinja2</code> templates that can access all the variables in the interactive shell. templates are rendered by the <code>IPython</code> display system and converted to their web representation.</p>"},{"location":"reactivity/#working-with-interactive-widgets","title":"working with interactive widgets","text":"<pre><code>### ipywidgets interop\n</code></pre>"},{"location":"reactivity/#ipywidgets-interop","title":"ipywidgets interop","text":"<pre><code>if you eat {{cookies.value}} then you consume {{cookies.value * 50}} calories.\n\n    (cookies := IntSlider(3, description=\"\ud83c\udf6a\"))\n</code></pre>  {\"model_id\": \"d6761ebb60fa467aae32df9402a132df\", \"version_major\": 2, \"version_minor\": 0}  <p>if you eat 3 then you consume 150 calories.</p> <pre><code>(cookies := IntSlider(3, description=\"\ud83c\udf6a\"))\n</code></pre> <pre><code>#### deploy applications with voila\n</code></pre>"},{"location":"reactivity/#deploy-applications-with-voila","title":"deploy applications with voila","text":"<pre><code>### todo panel interop \n</code></pre>"},{"location":"reactivity/#todo-panel-interop","title":"todo panel interop","text":"<pre><code>## forcing display updates\n\nsometimes you may want to execute a loop that forces updates to the ui. the `shell.weave` holds these abilities.\n\n    shell.weave.update()\n</code></pre>"},{"location":"reactivity/#forcing-display-updates","title":"forcing display updates","text":"<p>sometimes you may want to execute a loop that forces updates to the ui. the <code>shell.weave</code> holds these abilities.</p> <pre><code>shell.weave.update()\n</code></pre> <pre><code>## turn of reactivity\n\nreactivity is a feature of the wo ven display and we can turn that feature off.\n\n```ipython3\n    shell.weave.reactive = False\n```\n</code></pre>"},{"location":"reactivity/#turn-of-reactivity","title":"turn of reactivity","text":"<p>reactivity is a feature of the wo ven display and we can turn that feature off.</p> <pre><code>    shell.weave.reactive = False\n</code></pre>  {\"state\": {\"1b547c742dfa431186d2873eadba0939\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"5ae8f92a727942e5a92801cf636d87e2\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"SliderStyleModel\", \"state\": {\"description_width\": \"\"}}, \"d6761ebb60fa467aae32df9402a132df\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"IntSliderModel\", \"state\": {\"description\": \"\\ud83c\\udf6a\", \"layout\": \"IPY_MODEL_1b547c742dfa431186d2873eadba0939\", \"style\": \"IPY_MODEL_5ae8f92a727942e5a92801cf636d87e2\", \"value\": 3}}}, \"version_major\": 2, \"version_minor\": 0}"},{"location":"tangle_examples/","title":"examples of tangled <code>pidgy</code> input","text":"<p>this document is used to demonstrate how <code>pidgy</code> tangles code (ie translates markdown to python). each cell contains markdown input and the corresponding python code is revealed below.</p>"},{"location":"tangle_examples/#indented-code-vs-fenced-code","title":"indented code vs fenced code","text":"<p>the commonmark spec has two conventions before code, indented code and fenced code. literate programming languages generally choose on or the other. literate coffeescript prefers indented code while rmarkdown, myst, org-mode rely on code fences.</p> <p>code fences always add markdown semantics at the interface of code and narrative. indented code on the other hand can seamlessly flow between narrative. <code>pidgy</code> uses the indented code opinion and creates new affordances for both markdown and python as a single metalanguage.</p> <pre><code>try:\n    import piplite\n    await piplite.install(\"pidgy\")    \nexcept ImportError:\n    pass\n</code></pre> <pre><code>%load_ext pidgy.magics\n</code></pre>"},{"location":"tangle_examples/#markdown-as-block-strings","title":"markdown as block strings","text":"<p>a single line of markdown is wrapped in block quotes.</p> <pre><code>%%tangle\nmarkdown is just a string; the semi-colon is appended to suppress output.\n</code></pre> <pre>\"\"\"markdown is just a string; the semi-colon is appended to suppress output.\"\"\";\n</pre> <p>markdown blocks, not containing indented code, are block strings.</p> <pre><code>%%tangle\n`pidgy`s tangle scheme only requires block level parsing of markdown,\nand all non-indented markdown blocks are represented as strings.\nthis approach breaks convention relative to other markdown-forward literate programming\nimplementations that rely on code fences to indicate executable code.\n\n```python\nprint(\"in `pidgy`, code fences are ignored.\")\n```\n\nwhat follows is a large python block string\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>\"\"\"`pidgy`s tangle scheme only requires block level parsing of markdown,\nand all non-indented markdown blocks are represented as strings.\nthis approach breaks convention relative to other markdown-forward literate programming\nimplementations that rely on code fences to indicate executable code.\"\"\"\n\n# ```python\nprint(\"in `pidgy`, code fences are ignored.\")\n# ```\n\n\"\"\"what follows is a large python block string\"\"\";\n</pre> <pre><code>%%tangle\nquotations are ''escaped' for safety'\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>\"\"\"quotations are \\'\\'escaped\\' for safety\\'\"\"\";\n</pre>"},{"location":"tangle_examples/#adding-ipython-code","title":"adding <code>IPython</code> code","text":"<pre><code>%%tangle\ncode is acknowledged the first moment that an indented code block is found like the print expression below.\n\n        print(\"this is the first line of real code\")    \nthe result is valid python code with the markdown chunks represented as block strings\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>\"\"\"code is acknowledged the first moment that an indented code block is found like the print expression below.\"\"\"\n\nprint(\"this is the first line of real code\")    \n\"\"\"the result is valid python code with the markdown chunks represented as block strings\"\"\";\n</pre> <pre><code>%%tangle\nline continuations can be used to connection python expressions to the markdown blocks. \n\n        a_block_of_markdown=\\\n        \\\nwe can explicitly use line continuations to connection indented python to markdown.\nthis block of code will define `a_block_or_markdown`\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>\"\"\"line continuations can be used to connection python expressions to the markdown blocks.\"\"\" \n\na_block_of_markdown=\\\n\\\n\"\"\"we can explicitly use line continuations to connection indented python to markdown.\nthis block of code will define `a_block_or_markdown`\"\"\";\n</pre> <p>another tactic capturing blocks of markdown using parenthesis. in this form, methods can be applied to contents of the parenthesis. parenthesis are needed to combine multiple non-code markdown blocks.</p> <pre><code>%%tangle\n        parenthesized_markdown_block = (\none line\n\n            +\nanother line\n\n        ).upper()\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>parenthesized_markdown_block = (\n\"\"\"one line\"\"\"\n\n    +\n\"\"\"another line\"\"\"\n\n).upper()\n</pre> <pre><code>%%tangle\nexplicit strings, even explicit regular formatted strings, are invoked when the preceding code block ends with triple quotes.\n\n    explicit_string = rf\"\"\"\nthis markdown string is formatted and stripped.        \n\n    \"\"\".strip()\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>\"\"\"explicit strings, even explicit regular formatted strings, are invoked when the preceding code block ends with triple quotes.\"\"\"\n\nexplicit_string = rf\"\"\"\nthis markdown string is formatted and stripped.        \n\"\"\".strip()\n</pre>"},{"location":"tangle_examples/#docstrings","title":"docstrings","text":"<p>on of the most convenient affordances of pidgy is the ability to naturally write docstrings in markdown.</p> <pre><code>%%tangle\n    def my_function():\n`my_function` doesn't do anything!\n\n                        return # the position of the first line of code controls the aligned of the quotations\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>def my_function():\n\"\"\"`my_function` doesn\\'t do anything!\"\"\"\n\n                    return # the position of the first line of code controls the aligned of the quotations\n</pre> <p>classes can be composed with docstrings for the <code>type</code> and methods.</p> <pre><code>%%tangle\n    class MyClass:\nthis is `MyClass`, i'm object oriented!\n\n            def my_method(self):\n`MyClass.my_method` has knowledge of self\n\n                        pass\n</code></pre> pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .output_html .hll { background-color: #ffffcc } .output_html { background: #f8f8f8; } .output_html .c { color: #3D7B7B; font-style: italic } /* Comment */ .output_html .err { border: 1px solid #FF0000 } /* Error */ .output_html .k { color: #008000; font-weight: bold } /* Keyword */ .output_html .o { color: #666666 } /* Operator */ .output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */ .output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */ .output_html .cp { color: #9C6500 } /* Comment.Preproc */ .output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */ .output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */ .output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */ .output_html .gd { color: #A00000 } /* Generic.Deleted */ .output_html .ge { font-style: italic } /* Generic.Emph */ .output_html .gr { color: #E40000 } /* Generic.Error */ .output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */ .output_html .gi { color: #008400 } /* Generic.Inserted */ .output_html .go { color: #717171 } /* Generic.Output */ .output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */ .output_html .gs { font-weight: bold } /* Generic.Strong */ .output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */ .output_html .gt { color: #0044DD } /* Generic.Traceback */ .output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */ .output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */ .output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */ .output_html .kp { color: #008000 } /* Keyword.Pseudo */ .output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */ .output_html .kt { color: #B00040 } /* Keyword.Type */ .output_html .m { color: #666666 } /* Literal.Number */ .output_html .s { color: #BA2121 } /* Literal.String */ .output_html .na { color: #687822 } /* Name.Attribute */ .output_html .nb { color: #008000 } /* Name.Builtin */ .output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */ .output_html .no { color: #880000 } /* Name.Constant */ .output_html .nd { color: #AA22FF } /* Name.Decorator */ .output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */ .output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */ .output_html .nf { color: #0000FF } /* Name.Function */ .output_html .nl { color: #767600 } /* Name.Label */ .output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */ .output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */ .output_html .nv { color: #19177C } /* Name.Variable */ .output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */ .output_html .w { color: #bbbbbb } /* Text.Whitespace */ .output_html .mb { color: #666666 } /* Literal.Number.Bin */ .output_html .mf { color: #666666 } /* Literal.Number.Float */ .output_html .mh { color: #666666 } /* Literal.Number.Hex */ .output_html .mi { color: #666666 } /* Literal.Number.Integer */ .output_html .mo { color: #666666 } /* Literal.Number.Oct */ .output_html .sa { color: #BA2121 } /* Literal.String.Affix */ .output_html .sb { color: #BA2121 } /* Literal.String.Backtick */ .output_html .sc { color: #BA2121 } /* Literal.String.Char */ .output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */ .output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */ .output_html .s2 { color: #BA2121 } /* Literal.String.Double */ .output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */ .output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */ .output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */ .output_html .sx { color: #008000 } /* Literal.String.Other */ .output_html .sr { color: #A45A77 } /* Literal.String.Regex */ .output_html .s1 { color: #BA2121 } /* Literal.String.Single */ .output_html .ss { color: #19177C } /* Literal.String.Symbol */ .output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */ .output_html .fm { color: #0000FF } /* Name.Function.Magic */ .output_html .vc { color: #19177C } /* Name.Variable.Class */ .output_html .vg { color: #19177C } /* Name.Variable.Global */ .output_html .vi { color: #19177C } /* Name.Variable.Instance */ .output_html .vm { color: #19177C } /* Name.Variable.Magic */ .output_html .il { color: #666666 } /* Literal.Number.Integer.Long */<pre>class MyClass:\n\"\"\"this is `MyClass`, i\\'m object oriented!\"\"\"\n\n        def my_method(self):\n\"\"\"`MyClass.my_method` has knowledge of self\"\"\"\n\n                    pass\n</pre>"},{"location":"tangle_examples/#conflicting-opinions","title":"conflicting opinions","text":"<ul> <li>magic functions - specific to ipython not python</li> <li>truncating markdown blocks with null operators <code>...</code>, <code>pass</code>, <code>\"\"</code>, <code># comment</code></li> <li>hiding output during the weave step</li> <li>line continuations</li> </ul>"},{"location":"test_extras/","title":"<code>pidgy</code> <code>IPython</code> extensions","text":"<p><code>pidgy</code> is meant to support you while authoring code. we add some features to the conventional <code>IPython</code> shell to improve your experience getting your ideas onto the screen. below we discuss the following features:</p> <ul> <li><code>json</code> positive so you can copy and paste <code>json</code> data without a hiccup.</li> <li>top-level return statement for easier access to displays</li> <li>merge <code>sys.modules</code> with the user namespace</li> </ul> <p>by adding names to the user namespace we enrich the interactive completion in the authoring experience.</p> <pre><code>    %reload_ext pidgy.extras\n</code></pre>"},{"location":"test_extras/#json-positive","title":"<code>json</code> positive","text":"<p>by adding <code>true, false, null</code> to the built-ins python can accept <code>json</code>.</p> <pre><code>    true, false, null\n</code></pre> <pre>(True, False, None)</pre>"},{"location":"test_extras/#top-level-return","title":"top level return","text":"<p>top level return statements act as a <code>print/display</code> statement</p> <pre><code>    return 222, Markdown(\"__beep__, _beep_\")\n</code></pre> <pre>222</pre> <p>beep, beep</p>"},{"location":"test_extras/#ipython-displays","title":"<code>IPython</code> displays","text":"<p>by default, <code>pidgy</code> includes all of <code>IPython</code>s default display classes so it is easier to add multimedia to your stories. </p> <pre><code>    return HTML, Markdown, Math, YouTubeVideo\n</code></pre> <pre>IPython.core.display.HTML</pre> <pre>IPython.core.display.Markdown</pre> <pre>IPython.core.display.Math</pre> <pre>IPython.lib.display.YouTubeVideo</pre>"},{"location":"test_extras/#access-to-sysmodules","title":"Access to <code>sys.modules</code>","text":"<p>naming is hard they say, but if we have more names, we don't have to think as hard. when working in <code>IPython</code> there are quite a few modules imported that would be useful during development. to help you write we've included the <code>sys.modules</code> for quick access to tools without the burden of writing imports. we encourage you to add explicit imports later, but let's not get in the way of your flow.</p> <pre><code>    return textwrap, argparse, operator, IPython, inspect # are just some of the things you might find useful.\n</code></pre> <pre>&lt;module 'textwrap' from '/home/tbone/mambaforge/lib/python3.9/textwrap.py'&gt;</pre> <pre>&lt;module 'argparse' from '/home/tbone/mambaforge/lib/python3.9/argparse.py'&gt;</pre> <pre>&lt;module 'operator' from '/home/tbone/mambaforge/lib/python3.9/operator.py'&gt;</pre> <pre>&lt;module 'IPython' from '/home/tbone/mambaforge/lib/python3.9/site-packages/IPython/__init__.py'&gt;</pre> <pre>&lt;module 'inspect' from '/home/tbone/mambaforge/lib/python3.9/inspect.py'&gt;</pre>"},{"location":"test_extras/#shebangs","title":"Shebangs","text":"<p>we add the ability to execute cells with shebang statements. this feature is included to introduce folks to the concept of shebangs in a modern interface. when they encountered this feature in practice it can be more familiar.</p> <pre><code>    #!/usr/bin/env python\n    from pathlib import Path\n    print(F\"I'm a print statement a script with the name: {__name__} from {Path(__file__).name}\")\n</code></pre> <pre>I'm a print statement a script with the name: __main__ from ipython-6jy979yyk.py\n</pre>"},{"location":"demos/2023-02-28-community-demo/","title":"<code>pidgy</code> literate computing","text":"<p>you've heard of interactive computing, we'll call <code>pidgy</code> hyperactive computing. </p> \ud83c\udfc3run all \ud83d\uddb9document mode \ud83d\udcfdpresentation mode \u229fcollapse all the code \u229eexpand all the code <code>jupyterlab-deck</code> <code>voila</code> \ud83d\udd0dinspector \ud83d\udc6fside-by-side <p>this presentation is written for the february 2023 jupyter community call.2</p> <p>restart and run allor it didn't happen</p> <p>https://monoskop.org/images/b/be/Nelson_Ted_Literary_Machines_c1987_chs_0-1.pdf https://pure.au.dk/ws/files/173226224/PPIG_2019_camera_ready.pdf</p> <pre><code>    # my pidgy practices always have me indenting cells.\n    # this habit means code will be rendered as code in markdown.\n    # https://nbviewer.org/github/deathbeds/deathbeds.github.io/blob/master/deathbeds/2018-08-03-A-case-for-indented-code.ipynb\n\n    # this is a presentation about pidgy so we start by loading the extension.\n    # there is a pidgy kernel for the hardcore. \n    # in that case we recommend the hybrid `.md.ipynb` extension.\n\n    if LITE := (__import__(\"sys\").platform == \"emscripten\"): # compatability for jupyterlite\n        %pip install pandas pidgy matplotlib ipywidgets toolz\n\n    # activate pidgy\n    %reload_ext pidgy\n    from toolz.curried import *\n</code></pre> <pre><code># my pidgy practices always have me indenting cells.\n# this habit means code will be rendered as code in markdown.\n# https://nbviewer.org/github/deathbeds/deathbeds.github.io/blob/master/deathbeds/2018-08-03-A-case-for-indented-code.ipynb\n\n# this is a presentation about pidgy so we start by loading the extension.\n# there is a pidgy kernel for the hardcore. \n# in that case we recommend the hybrid `.md.ipynb` extension.\n\nif LITE := (__import__(\"sys\").platform == \"emscripten\"): # compatability for jupyterlite\n    %pip install pandas pidgy matplotlib ipywidgets toolz\n\n# activate pidgy\n%reload_ext pidgy\nfrom toolz.curried import *\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#the-pidgy-polyglot-metalanguage","title":"the <code>pidgy</code> polyglot metalanguage","text":"<p><code>pidgy</code> is a pidgin of python programming and jinja templates embedded inside markdown. literate programming is that aim to craft documentation and code at the same time. literate computing is when we do this interactively, and weave live computing into the narrative.</p> <pre><code>&lt;figure&gt;\n&lt;figcaption&gt;\n\nthe REPL overlayed with a [literate computing] workflow of tangle and weave.\n\n&lt;/figcaption&gt;\n\n{% set repl %}\n    input[markdown]--tangle\\nread--&gt;IPython\n    IPython--eval/template--&gt;jinja\n    jinja--weave\\nprint--&gt;output[markdown]\n    output[markdown]-.loop-.-&gt;input\n    html ---&gt; input; css ---&gt; input; javascript ---&gt; input\n    julia ---&gt; magics; r---&gt; magics; fortran ---&gt; magics; magics ---&gt; IPython\n{% endset %}\n```mermaid\nflowchart LR\n{% for i, line in enumerate(repl.splitlines()) %}\n{% if i &gt; extra.value %}%%{% endif %}{{line}}\n{% endfor %}\n```\n&lt;figcaption&gt;mermaid graph syntax uses extended markdown syntax provided by &lt;code&gt;jupyterlab-markup&lt;/code&gt;&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n        display(extra := IntSlider(6, min=1, max=6, description=\"show more languages\")) # 6 lines in the graph\n\n`pidgy` is interested in exploring the interfaces of languages in computational essays. each language provides extra syntax for telling your story. with markdown we can include html, css, and javascript; code blocks can include more languages like mermaid. [IPython is our polyglot glue language][polyglot notebook]. \n\n[literate computing]: #\n[polyglot notebook]: https://gist.github.com/fperez/5b49246af4e340c37549265a90894ce6 \"fperez's polyglot juypyter demo\"\n\n[fperez lc]: https://web.archive.org/web/20220510083647/http://blog.fperez.org/2013/04/literate-computing-and-computational.html\n</code></pre>  {\"model_id\": \"a59df83a6d58485bb5d8618256e25abc\", \"version_major\": 2, \"version_minor\": 0}    the REPL overlayed with a [literate computing] workflow of tangle and weave.   <pre><code>flowchart LR\n\n\n\n    input[markdown]--tangle\\nread--&gt;IPython\n\n    IPython--eval/template--&gt;jinja\n\n    jinja--weave\\nprint--&gt;output[markdown]\n\n    output[markdown]-.loop-.-&gt;input\n\n    html ---&gt; input; css ---&gt; input; javascript ---&gt; input\n\n    julia ---&gt; magics; r---&gt; magics; fortran ---&gt; magics; magics ---&gt; IPython\n</code></pre> mermaid graph syntax uses extended markdown syntax provided by <code>jupyterlab-markup</code> <pre><code>    display(extra := IntSlider(6, min=1, max=6, description=\"show more languages\")) # 6 lines in the graph\n</code></pre> <p><code>pidgy</code> is interested in exploring the interfaces of languages in computational essays. each language provides extra syntax for telling your story. with markdown we can include html, css, and javascript; code blocks can include more languages like mermaid. IPython is our polyglot glue language. </p>"},{"location":"demos/2023-02-28-community-demo/#inspecting-and-doing-more-with-a-keypress","title":"inspecting and doing more with a keypress","text":"<p>Ctrl + I open inspector \u26d4<code>jupyterlab-deck</code></p>"},{"location":"demos/2023-02-28-community-demo/#translating-markdown-to-python","title":"translating markdown to python","text":"<p>the <code>%%tangle</code> magic tangles markdown to python code for previewing and debugging. this magic will help you learn <code>pidgy</code>s indenting heuristics and language features provided by <code>midgy</code>.</p> <pre><code>%%tangle\nwe use the `%%tangle` magic interactively translate the document into code.\n\nsome `pidgy` features are shown below like:\n\n* markdown docstrings\n\n        def my_function():\nfunctions with markdown docstrings\n\n            ...\n        ...\n\n* defining blocks of markdown as variables\n\n        my_url =\\\nhttps://api.github.com\n</code></pre> <pre>\"\"\"we use the `%%tangle` magic interactively translate the document into code.\n\nsome `pidgy` features are shown below like:\n* markdown docstrings\"\"\"\n\ndef my_function():\n\"\"\"functions with markdown docstrings\"\"\"\n\n    ...\n...\n\"\"\"* defining blocks of markdown as variables\"\"\"\n\nmy_url =\\\n\"\"\"https://api.github.com\"\"\";\n</pre>"},{"location":"demos/2023-02-28-community-demo/#an-homage-knuths-literate-programming-language","title":"an homage knuth's literate programming language","text":"<pre><code>&lt;figure&gt;\n&lt;figcaption&gt;\n\na mermaid homage to the dual usage of the WEB file format being translated to a document and programming language.\n\n&lt;/figcaption&gt; \n\n```mermaid\nflowchart LR\n    WEB--WEAVE--&gt;TEX--TeX--&gt;DVI\n    WEB--TANGLE--&gt;PAS--PASCAL--&gt;REL\n```\n&lt;/figure&gt;\n\n&lt;figure markdown&gt;\n&lt;figcaption&gt;knuth's rational for choosing Pascal; the same motivation applies to python.&lt;/figcaption&gt;\n\n&gt; I chose PASCAL as the programming language because it has\nreceived such widespread support from educational  in-\nstitutions all over the world; it is not my favorite language for system programming, but it has become a\n\"second language\" for so many programmers that it\nprovides an exceptionally effective medium of communication.\n&lt;/figure&gt;\n</code></pre>   a mermaid homage to the dual usage of the WEB file format being translated to a document and programming language.   <pre><code>flowchart LR\n    WEB--WEAVE--&gt;TEX--TeX--&gt;DVI\n    WEB--TANGLE--&gt;PAS--PASCAL--&gt;REL</code></pre> knuth's rational for choosing Pascal; the same motivation applies to python. <p>I chose PASCAL as the programming language because it has received such widespread support from educational  in- stitutions all over the world; it is not my favorite language for system programming, but it has become a \"second language\" for so many programmers that it provides an exceptionally effective medium of communication.</p> <pre><code>## reactive `jinja2` templates\n\n&lt;label for=\"deck\"&gt;open&lt;/label&gt;\n&lt;button id=\"deck\" data-commandlinker-command=\"deck:toggle\"&gt;&lt;code&gt;jupyterlab-deck&lt;/code&gt;&lt;/button&gt;\n\n`pidgy` relies on a `midgy` to tangle markdown to code, it does not doing any work on displaying the input markdown. including the templating language is the innovation of `pidgy` that inlines live computation.\n\n\n`pidgy` templates are asynchronous reactive display objects that place live computation directly into the narrative.\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#reactive-jinja2-templates","title":"reactive <code>jinja2</code> templates","text":"<p>open <code>jupyterlab-deck</code></p> <p><code>pidgy</code> relies on a <code>midgy</code> to tangle markdown to code, it does not doing any work on displaying the input markdown. including the templating language is the innovation of <code>pidgy</code> that inlines live computation.</p> <p><code>pidgy</code> templates are asynchronous reactive display objects that place live computation directly into the narrative.</p> <pre><code>### worrydream's cookies demo[^inventing]\n\n&lt;!---![](https://media3.giphy.com/media/BsUORZkF3gBqg/giphy.gif \"cookie monster happy as fuck eating cookies\")---&gt;\n\n&lt;blockquote cite=\"https://worrydream.com/Tangle/\"&gt;\n\n[Tangle] is a JavaScript library for creating reactive documents. Your readers can interactively explore possibilities, play with parameters, and see the document update immediately. Tangle is super-simple and easy to learn.\n\n&lt;/blockquote&gt;\n\n&lt;figure&gt;\n&lt;figcaption&gt;\n\nthe source code for the first [TangleJs][tangle] demo\n\n&lt;/figcaption&gt;\n\n```html\nWhen you eat &lt;span data-var=\"cookies\" class=\"TKAdjustableNumber\"&gt; cookies&lt;/span&gt;,\nyou consume &lt;span data-var=\"calories\"&gt; calories&lt;/span&gt;. \n```\n\n```javascript\nvar tangle = new Tangle(document, {\n    initialize: function () { this.cookies = 3; },\n    update:     function () { this.calories = this.cookies * 50; }\n});\n\n```\n&lt;/figure&gt;\n\n[tangle]: http://worrydream.com/Tangle/\n[inventing on principle]: https://www.youtube.com/watch?v=PUv66718DII\n[^inventing]: many folks working on computational interfaces are inspired by Bret Victor's [inventing on principle]\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#worrydreams-cookies-demo3","title":"worrydream's cookies demo3","text":"[Tangle] is a JavaScript library for creating reactive documents. Your readers can interactively explore possibilities, play with parameters, and see the document update immediately. Tangle is super-simple and easy to learn.     the source code for the first [TangleJs][tangle] demo   <pre><code>When you eat &lt;span data-var=\"cookies\" class=\"TKAdjustableNumber\"&gt; cookies&lt;/span&gt;,\nyou consume &lt;span data-var=\"calories\"&gt; calories&lt;/span&gt;. \n</code></pre> <pre><code>var tangle = new Tangle(document, {\ninitialize: function () { this.cookies = 3; },\nupdate:     function () { this.calories = this.cookies * 50; }\n});\n</code></pre> <pre><code>{% set calories = 50 %}&lt;!--- we can shield variables from the global scope --&gt;\nWhen you eat {{cookies.value}} cookies,\nyou consume {{cookies.value * calories}} calories. \n\n&lt;div hidden&gt;&lt;!--indented code is python--&gt;\n\n        display(cookies := IntSlider(3, description=\"\ud83c\udf6a\"))\n&lt;/div&gt;\n\n{{\"\ud83c\udf6a\" * cookies.value}}\n\n\n&lt;figure&gt;\n&lt;figcaption&gt;\n\n`pidgy` source code using html, markdown, jinja, and ipywidgets to create interactions\n\n&lt;/figcaption&gt;\n\n```markdown\n{% raw %}\n{% set calories = 50 %}\nWhen you eat {{cookies.value}} cookies,\nyou consume {{cookies.value * calories}} calories. \n\n&lt;div hidden&gt;&lt;!--indented code is python--&gt;\n\n        cookies = IntSlider(3, description=\"\ud83c\udf6a\")\n&lt;/div&gt;\n{% endraw %}\n```\n\n&lt;/figure&gt;\n</code></pre>  var element = $('#da46a6b9-a2f6-48ef-a249-5fcdcdace153');   {\"model_id\": \"f016f5bea3b4435ca354c50cabede4bd\", \"version_major\": 2, \"version_minor\": 0}  <p>When you eat 3 cookies, you consume 150 calories. </p>           display(cookies := IntSlider(3, description=\"\ud83c\udf6a\"))  <p>\ud83c\udf6a\ud83c\udf6a\ud83c\udf6a</p>   `pidgy` source code using html, markdown, jinja, and ipywidgets to create interactions   <pre><code>{% set calories = 50 %}\nWhen you eat {{cookies.value}} cookies,\nyou consume {{cookies.value * calories}} calories. \n\n&lt;div hidden&gt;&lt;!--indented code is python--&gt;\n\n        cookies = IntSlider(3, description=\"\ud83c\udf6a\")\n&lt;/div&gt;\n</code></pre> <pre><code>### live data in your document\n\n&lt;details markdown&gt;\n&lt;summary&gt;imports for the pandas matplotlib demo&lt;/summary&gt;\n\n    import pandas\n    from pidgy import get_cell_id\n    %matplotlib agg\n\n&lt;/details&gt;\n\n&lt;details markdown open&gt;\n&lt;summary&gt;supporting methods for the interactive demo&lt;/summary&gt;`\n\n    @functools.lru_cache\n    def get_gist(x, max=100):\n[gather gist from the github api][gist].\n\n        return pandas.read_json(F\"https://api.github.com/users/{x}/gists?per_page={max}\")\n\n[gist]: https://docs.github.com/en/rest/gists?apiVersion=2022-11-28\n\n    def tidy_gist(x):\nexplode the gist repsonse into a dataframe of gist files\n\n        gists = get_gist(x).set_index(\"id\")\n        return gists.files.apply(compose_left(dict.values, list)).explode().apply(pandas.Series).join(gists)\n\n&lt;/details&gt;\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#live-data-in-your-document","title":"live data in your document","text":"imports for the pandas matplotlib demo <pre><code>import pandas\nfrom pidgy import get_cell_id\n%matplotlib agg\n</code></pre> supporting methods for the interactive demo <p>`</p> <pre><code>@functools.lru_cache\ndef get_gist(x, max=100):\n</code></pre> <p>gather gist from the github api.</p> <pre><code>    return pandas.read_json(F\"https://api.github.com/users/{x}/gists?per_page={max}\")\n\ndef tidy_gist(x):\n</code></pre> <p>explode the gist repsonse into a dataframe of gist files</p> <pre><code>    gists = get_gist(x).set_index(\"id\")\n    return gists.files.apply(compose_left(dict.values, list)).explode().apply(pandas.Series).join(gists)\n</code></pre> <pre><code>#### an application in a cell.\n\n{% set gists = tidy_gist(_github_user.value) %}\n{% set lang = gists.language.dropna().value_counts() %}\n\nwe've found information on {{gists.index.unique().shape[0]}} github gists, and {{len(gists)}} files, for @{{_github_user.value}}.\nin this collection, there are {{len(lang)}} different languages included. their most common language is {{lang.index[0]}}.\n\n{{gists.sample(2)}}\n\n    display(\n        _github_user := Text(\"tonyfast\"), button := Button(description=\"submit\"))\n    button.on_click(lambda x, id=get_cell_id(): print(id) or shell.weave.displays[id].update())\n{{lang.to_frame(\"ct\").T}}\n</code></pre>  var element = $('#1cbb177a-18bf-4e0f-be7f-0c4cb87d3b26');   {\"model_id\": \"7d97888f8793458e9b5b1890ed2b0128\", \"version_major\": 2, \"version_minor\": 0}   var element = $('#a5de4859-fe58-47d7-83dc-eb2330671f1e');   {\"model_id\": \"f2f83d66fd4342359aae8d4f64e1cf69\", \"version_major\": 2, \"version_minor\": 0}"},{"location":"demos/2023-02-28-community-demo/#an-application-in-a-cell","title":"an application in a cell.","text":"<p>we've found information on 100 github gists, and 121 files, for @tonyfast. in this collection, there are 6 different languages included. their most common language is Jupyter Notebook.</p>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  filename type language raw_url size url forks_url commits_url node_id git_pull_url ... files public created_at updated_at description comments user comments_url owner truncated id 89fd5090a964b565e2575e50fd51744f nox-magic.ipynb text/plain Jupyter Notebook https://gist.githubusercontent.com/tonyfast/89... 8072 https://api.github.com/gists/89fd5090a964b565e... https://api.github.com/gists/89fd5090a964b565e... https://api.github.com/gists/89fd5090a964b565e... MDQ6R2lzdDg5ZmQ1MDkwYTk2NGI1NjVlMjU3NWU1MGZkNT... https://gist.github.com/89fd5090a964b565e2575e... ... {'nox-magic.ipynb': {'filename': 'nox-magic.ip... True 2021-05-01 03:02:46+00:00 2021-05-01 03:02:46+00:00 0 NaN https://api.github.com/gists/89fd5090a964b565e... {'login': 'tonyfast', 'id': 4236275, 'node_id'... False 3440a5b4c19a257d6164fff93fbef154 magics.ipynb text/plain Jupyter Notebook https://gist.githubusercontent.com/tonyfast/34... 12759 https://api.github.com/gists/3440a5b4c19a257d6... https://api.github.com/gists/3440a5b4c19a257d6... https://api.github.com/gists/3440a5b4c19a257d6... MDQ6R2lzdDM0NDBhNWI0YzE5YTI1N2Q2MTY0ZmZmOTNmYm... https://gist.github.com/3440a5b4c19a257d6164ff... ... {'magics.ipynb': {'filename': 'magics.ipynb', ... True 2021-05-28 16:15:20+00:00 2021-05-28 20:48:01+00:00 0 NaN https://api.github.com/gists/3440a5b4c19a257d6... {'login': 'tonyfast', 'id': 4236275, 'node_id'... False <p>2 rows \u00d7 22 columns</p> <pre><code>display(\n    _github_user := Text(\"tonyfast\"), button := Button(description=\"submit\"))\nbutton.on_click(lambda x, id=get_cell_id(): print(id) or shell.weave.displays[id].update())\n</code></pre>      .dataframe tbody tr th:only-of-type {         vertical-align: middle;     }      .dataframe tbody tr th {         vertical-align: top;     }      .dataframe thead th {         text-align: right;     }  Jupyter Notebook Python Text Markdown HTML JSON ct 84 15 9 8 2 1 <pre><code>### et `voila`\n\n{% if LITE %}\n&gt; \ud83d\ude1e unforntunately, this part of the demo is not available on jupyter lite.\n{% endif %}\n\n&lt;button data-commandlinker-command=\"notebook:render-with-voila\" {% if  LITE %}disabled{% endif %}&gt;et &lt;code&gt;voila&lt;/code&gt;&lt;/button&gt;\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#et-voila","title":"et <code>voila</code>","text":"<p>et <code>voila</code></p> <pre><code>## wrap up\n\n* this presentation had a number of incidental demos.\n    * jupyterlab-deck\n    * jupyterlab-markup\n    * voila\n    * mermaid\n    * midgy\n\n\n* we have on and off cells now that all of the sources are markdown \n* the template syntax is a powerful way to include python variables inline. the traditional notebook format only allows for block level literate programs.\n* since literate programs are pidgin languages we can't expect them to be formalized. there are a lot of inconsistencies with the languages combined.\njinja2 template implementations vary. markdown renderers implementation vary. python keeps adding language features. \n\n{% set sz = 3 %}\n{% set h = 60 %}\n&lt;form style=\"font-size: {{sz}}rem; line-height: {{h}}%;\"&gt;\n&lt;label for=\"rara\"&gt;\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97&lt;/label&gt;&lt;br/&gt;&lt;button id=\"rara\" data-commandlinker-command=\"runmenu:restart-and-run-all\" style=\"font-size: {{sz}}rem; line-height: {{h}}%;\"&gt;restart and run all&lt;/button&gt;&lt;br/&gt;&lt;label for=\"rara\"&gt;or it didn't happen&lt;/label&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"demos/2023-02-28-community-demo/#wrap-up","title":"wrap up","text":"<ul> <li> <p>this presentation had a number of incidental demos.</p> <ul> <li>jupyterlab-deck</li> <li>jupyterlab-markup</li> <li>voila</li> <li>mermaid</li> <li>midgy</li> </ul> </li> <li> <p>we have on and off cells now that all of the sources are markdown </p> </li> <li>the template syntax is a powerful way to include python variables inline. the traditional notebook format only allows for block level literate programs.</li> <li>since literate programs are pidgin languages we can't expect them to be formalized. there are a lot of inconsistencies with the languages combined. jinja2 template implementations vary. markdown renderers implementation vary. python keeps adding language features. </li> </ul> \ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97\ud83c\udf97restart and run allor it didn't happen  {\"state\": {\"049278abfa294c0db4a5587c1f0388cc\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"SliderStyleModel\", \"state\": {\"description_width\": \"\"}}, \"19a390e5943c408bb0a2fd03d819ac60\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"2.0.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"624f5c44a24a4fdb86ca8530e9766ec4\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"2.0.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"7001f7f85ef8452882c868d634f91832\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"2.0.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"7d97888f8793458e9b5b1890ed2b0128\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"TextModel\", \"state\": {\"layout\": \"IPY_MODEL_624f5c44a24a4fdb86ca8530e9766ec4\", \"style\": \"IPY_MODEL_fdbe474d5faf4f2c8e1a0a04125a932e\", \"value\": \"tonyfast\"}}, \"8cd9ea1510f349b4b433f238581ae1bd\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"ButtonStyleModel\", \"state\": {\"font_family\": null, \"font_size\": null, \"font_style\": null, \"font_variant\": null, \"font_weight\": null, \"text_color\": null, \"text_decoration\": null}}, \"a59df83a6d58485bb5d8618256e25abc\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"IntSliderModel\", \"state\": {\"behavior\": \"drag-tap\", \"description\": \"show more languages\", \"layout\": \"IPY_MODEL_19a390e5943c408bb0a2fd03d819ac60\", \"max\": 6, \"min\": 1, \"style\": \"IPY_MODEL_bceb7f3a84fc489ba4019921fcdc9df7\", \"value\": 6}}, \"bceb7f3a84fc489ba4019921fcdc9df7\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"SliderStyleModel\", \"state\": {\"description_width\": \"\"}}, \"e7ac690d2a12492ab162dc9503938061\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"2.0.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"f016f5bea3b4435ca354c50cabede4bd\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"IntSliderModel\", \"state\": {\"behavior\": \"drag-tap\", \"description\": \"\\ud83c\\udf6a\", \"layout\": \"IPY_MODEL_7001f7f85ef8452882c868d634f91832\", \"style\": \"IPY_MODEL_049278abfa294c0db4a5587c1f0388cc\", \"value\": 3}}, \"f2f83d66fd4342359aae8d4f64e1cf69\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"ButtonModel\", \"state\": {\"description\": \"submit\", \"layout\": \"IPY_MODEL_e7ac690d2a12492ab162dc9503938061\", \"style\": \"IPY_MODEL_8cd9ea1510f349b4b433f238581ae1bd\", \"tooltip\": null}}, \"fdbe474d5faf4f2c8e1a0a04125a932e\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"2.0.0\", \"model_name\": \"TextStyleModel\", \"state\": {\"description_width\": \"\", \"font_size\": null, \"text_color\": null}}}, \"version_major\": 2, \"version_minor\": 0}  <ol> <li> <p>there is massive adoption of markdown as a tool for programmers. folks can use markdown and jekyll templating languages on github pages. github profiles are written in markdown. markdown is a gateway drug to html, javascript, and css.\u00a0\u21a9</p> </li> <li> <p>jupyter community calls are a monthly series of events to showcase what you are doing in and with jupyter. please consider submitting to or hosting a future community call sometime\u00a0\u21a9</p> </li> <li> <p>many folks working on computational interfaces are inspired by Bret Victor's inventing on principle \u21a9</p> </li> </ol>"}]}